<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Admin_area extends MX_Controller{
    function __construct()
    {
        parent::__construct();
        $this->sess_id = $this->session->userdata('userid');
        $this->load->model('Admin_area_model');
    } 

    /*
     * Listing of user
     */
    function index()
    {
        if(empty($this->sess_id)) {
            redirect('index.php/administrator/login');
        }
        
        $this->load->library('pagination');
        
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('index.php/administrator/area');
        $config['total_rows'] = $this->Admin_area_model->get_all_G_USERS_count();
        $this->pagination->initialize($config);

        $data['user'] = $this->Admin_area_model->get_all_G_USERS($params);
        
        $data['content'] = $this->load->view('admin_area/index',$data,true);
        $this->parser->parse(TEMPLATE.'/content_admin', $data);
    }

    /*
     * Adding a new G_USERS
     */
    function add()
    {   
        if(empty($this->sess_id)) {
            redirect('index.php/administrator/login');
        }
        
        $this->load->library('form_validation');

		$this->form_validation->set_rules('typeArea','Type Area','required|max_length[50]');
		
        
		if($this->form_validation->run())     
        {

        $params = array(
            'TYPE' => $this->input->post('typeArea'),
            'NAME'=> $this->input->post('nameArea'),
            'CREATED_BY'=> $this->input->post('createdBy'),
            'CREATED_DATE' => date("Y-m-d H:i:s"),
            'MODIFIED_DATE' => date("Y-m-d H:i:s")
        );
            $user_id = $this->Admin_area_model->add_G_USERS($params); 
            $this->session->set_flashdata('msg','<div class="alert alert-warning alert-dismissible fade show" role="alert">Data Saved!<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>');
            redirect('index.php/administrator/area');
        }
        else
        { 

        $data['content'] = $this->load->view('admin_area/add',null,true);
        $this->parser->parse(TEMPLATE.'/content_admin', $data);
    }
    }  

    /*
     * Editing a user
     */
    function edit($id)
    {   
        if(empty($this->sess_id)) {
            redirect('index.php/administrator/login');
        }
        
        // check if the user exists before trying to edit it
        $data['user'] = $this->User_model->get_G_USERS($id);
        
        if(isset($data['user']['U_ID']))
        {
            $this->load->library('form_validation');
            //harus ada setiap custom validasi
            $this->form_validation->CI =& $this;

			$this->form_validation->set_rules('username','Username','required|max_length[50]|callback_username_check['.$id.']');
            
            //check old pass
            if ($this->input->post('password_old') != "") {
                $this->form_validation->set_rules('password_old','Old Password','callback_password_old_check['.$id.']');
                $this->form_validation->set_rules('password','Password','required');
                $this->form_validation->set_rules('password_conf','Password Confirmation','required|matches[password]');
            }
		
			if($this->form_validation->run())
            {
                $params = array(
                    'USERNAME' => $this->input->post('username'),
                    'PASSWORD' => md5($this->input->post('password'))
                );

                $this->User_model->update_G_USERS($id,$params);
                $this->session->set_flashdata('msg','<div class="alert alert-warning alert-dismissible fade show" role="alert">Data Tersimpan<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>');
                redirect('user');
            }
            else
            {
                $data['content'] = $this->load->view('user/edit',$data,true);
                $this->parser->parse(TEMPLATE.'/content_admin', $data);
            }
        }
        else
            show_error('The user you are trying to edit does not exist.');
    } 
    
    public function username_check($str,$id)
    {
        $chk = $this->User_model->check_username($str,$id);
        if ($chk > 0) {
            $this->form_validation->set_message('username_check', 'Username Exist');
            return false;
        }
        return true;
    }
    
    public function password_old_check($old_password,$id){
       $old_password_hash = md5($old_password);
       $old_password_db_hash = $this->User_model->check_pass($id);

       if($old_password_hash != $old_password_db_hash)
       {
          $this->form_validation->set_message('password_old_check', 'Old password not match');
          return FALSE;
       }
       return TRUE;
    }

    /*
     * Deleting user
     */
    function remove($id)
    {
        if(empty($this->sess_id)) {
            redirect('index.php/administrator/login');
        }

        $user = $this->Admin_area_model->get_G_USERS($id);

        // check if the user exists before trying to delete it
        if(isset($user['AREA_ID']))
        {
            $this->Admin_area_model->delete_G_USERS($id);
            $this->session->set_flashdata('msg','<div class="alert alert-warning alert-dismissible fade show" role="alert">Data Has been remove !<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>');
            redirect('index.php/administrator/area');
        }
        else
            show_error('The user you are trying to delete does not exist.');
    }

    /*
    * List SPL
    */
    function ListSPL(){
        if(empty($this->sess_id)) {
            redirect('index.php/administrator/login');
        }
        
        $this->load->library('pagination');
        
       $params['limit'] = RECORDS_PER_PAGE; 
       $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
       $config = $this->config->item('pagination');
       $config['base_url'] = site_url('index.php/user/ListSPL');
       $config['total_rows'] = $this->User_model->get_all_spl_count();
       $this->pagination->initialize($config);

       $data['splid'] = $this->User_model->get_all_spl($params);
 
       $data['content'] = $this->load->view('user/ListSPL',$data,true);
       $this->parser->parse(TEMPLATE.'/content_admin', $data);
    }

    
}
